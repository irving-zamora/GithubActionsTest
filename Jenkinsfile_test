/*
    pipleine designed to contain all of the logic for the various environments
    and will be manually triggered for the deployment of api gateway components
    including api configrations per environment, Go custom plug-in and dev portal docs

    this pipeline is also directly invoked triggered by the "dev-ci_cd" Jenkins job which
    passes the appropriate parameter values for the dev environment
*/

pipeline {
    agent any

    parameters {
        choice(name: 'SELECTED_ENV', choices: ['dev', 'te-prod', 'perf', 'uat', 'prod'], description: 'Choose environement to build and deploy')

        string(name: 'RELEASE_BRANCH', defaultValue: 'release-6.x', description: 'Input the release branch that has been configured in Github')
    }
    
    environment {
        // just here as an example
        TEST_ENV = """${sh(
            returnStatus: true,
            script: 'exit 1'
        )}"""

        GO_VERSION = '1.20' 
        TYK_VERSION = 'v5.0.3'

        tykApiKeyEnv = credentials("TYK_API_KEY_${SELECTED_ENV}")
        tykApiDefEndpointURL = credentials("TYK_APIDEF_ENDPOINT_URL_${SELECTED_ENV.toUpperCase()}")
    }

    stages {
        stage('Initialize') {
            steps {
                echo 'install and/or setup anything necessary...'
                echo "SELECTED_ENV = $params.SELECTED_ENV"
                echo "RELEASE_BRANCH = $params.RELEASE_BRANCH"
                deleteDir()
            }
        }

        stage('Clone repo') {
            steps {
                script {
                    sh 'git clone https://github.com/Omnitracs/fleet.api-gateway.git'
                }
            }  
        }
        
        stage('Custom Go Plugin') {
            stages {
                stage ('build') {
                    steps {
                        sh '''
                            cd fleet.api-gateway/src/custom-go-plugin
                            make build
                        '''
                    }
                }

                stage ('unit test') {
                    steps {
                        sh '''
                            cd fleet.api-gateway/src/custom-go-plugin
                            make test
                        '''
                    }
                }

                stage('Generate Coverage') {
                    steps {
                        script {
                            sh '''
                                cd fleet.api-gateway/src/custom-go-plugin
                                make coverage
                            '''
                            archiveArtifacts artifacts: 'fleet.api-gateway/src/custom-go-plugin/go/src/coverage.out', allowEmptyArchive: true
                        }
                    }
                }

                stage('Upload Artifacts and check Coverage Threshold') {
                    steps {
                        script {
                            sh '''
                                cd fleet.api-gateway/src/custom-go-plugin/go/src/
                                go tool cover -func=coverage.out > coverage_summary.txt
                            '''
                        }
                        archiveArtifacts artifacts: 'fleet.api-gateway/src/custom-go-plugin/go/src/coverage.html, fleet.api-gateway/src/custom-go-plugin/go/src/coverage_summary.txt', allowEmptyArchive: true
                    }
                    post {
                        success {
                            script {
                                checkCoverageThreshold()
                                echo "Coverage above threshold of 80%"
                            }
                        }
                    }

                }

                stage('Set up Tyk cli') {
                    steps {
                        
                        sh '''
                            cd fleet.api-gateway/src/custom-go-plugin/go/src
                            go get -d github.com/TykTechnologies/tyk-cli
                            go mod tidy ; \
                            go mod vendor
                        '''
                    }
                }

                stage('Bundle') {
                    steps {
                
                        sh '''
                            cd fleet.api-gateway/src/custom-go-plugin
                            make PLUGIN_VERSION=v1.0.3 ENV=${SELECTED_ENV} BUNDLE_USER=root bundle
                        '''
                        archiveArtifacts artifacts: 'fleet.api-gateway/src/custom-go-plugin/tyk/bundle/bundle.zip', allowEmptyArchive: true
                    }
                }
            }
            
        }
        
        stage('Process Api Configs') {
            // this needs to be a loop based on api config in a specific repo dir -- once per api config for selected env
            steps {
                echo 'Process Api Configs... this will take an api template and will merge with the appropriate api/env override json file and produced the merged api config artifacts'
                script {

                    
                    echo tykApiDefEndpointURL                 
                    
                    //depending on the branch selected we assing api key and url
                    if (SELECTED_ENV=="dev"){
                        env.ENDPOINT_URL = 'https://dusty-colt-adm.aws-use1.cloud-ara.tyk.io/api/apis'
                    }else if (SELECTED_ENV=="te-prod"){
                        env.ENDPOINT_URL = 'https://isolated-crab-adm.aws-use1.cloud-ara.tyk.io/api/apis'    
                    }
                                        
                    def path = 'iac/api-definitions/base'
                    def filesList = sh(script: "find ${path} -type f", returnStdout: true).trim().split('\n')
                    
                    //Declaring a jsonarray to store all the jsons loads for the put or post request
                    def jsonArrayPUT = []
                    def jsonArrayPOST = []

                    //Loop to look into all files in base folder
                    filesList.each { file ->
                        echo " - ${file}"

                        def fileName = file.tokenize('/').last()
                        def apiName = fileName.substring(0, fileName.lastIndexOf('.'))

                        echo apiName
                                                                     
                        //Reading the file in base folder                        
                        def jsonText = readFile file
                        //Reading the file in env-overrides folder
                        def path2nd = "iac/api-definitions/env-overrides/${apiName}-"+SELECTED_ENV+'.json'
                        def jsonText2 = readFile path2nd
                                                
                        //Run the command jq to merge dynamically
                        def mergedJson = sh(script: """
                            echo '${jsonText}' | jq --slurpfile replacement '${path2nd}' '. * \$replacement[0]' 
                        """, returnStdout: true).trim()

                        //GET REQUEST
                        echo "enter to the GET request"
                        
                        def response = sh(script: 'curl --location ' +'"'+ env.ENDPOINT_URL +'?q='+apiName+'" '+' --header "authorization: ${tykApiKeyEnv}"', returnStdout: true).trim()

                        echo "Exiting GET request"

                        def parsedJson = new groovy.json.JsonSlurperClassic().parseText(response)

                        env.apiID = "";
                        env.boolResponse = false;//This var works to know if we have a valid response
                        if (parsedJson.apis.size()>0) {
                            env.boolResponse = true;

                            env.apiID = parsedJson.apis[0].api_definition.id
                            
                            // Convert jsonText to JSON object                            
                            def parsedJsonText = new groovy.json.JsonSlurperClassic().parseText(jsonText2)

                            //We fusion the second json into the json response from the GET request
                            def apiDefinition = parsedJson.apis[0].api_definition
                            apiDefinition.putAll(parsedJsonText.api_definition)    
                            def apiDefinitionName = 'api_definition'
                            def tempJson = parsedJson.apis[0]

                            //this variable only stores the api_definition property, this is the only one we need to
                            //send in the body for our PUT request
                            def apiDefinitionJson = [("$apiDefinitionName"): tempJson[apiDefinitionName]]                            
                            
                            jsonArrayPUT.add(apiDefinitionJson)
                            
                            echo "array PUT"
                        }else{
                            jsonArrayPOST.add(mergedJson)
                            echo "array POST"
                        }

                        
                    }
                    //Saving the arrays in environment variables
                    env.jsonArrayPOSTGlobal = new groovy.json.JsonBuilder(jsonArrayPOST).toPrettyString()                                        
                    env.jsonArrayPUTGlobal = new groovy.json.JsonBuilder(jsonArrayPUT).toPrettyString()                   
                }
            }
        }

        stage('Confirm Deployment') {
            when {
                expression {params.RELEASE_BRANCH != 'develop'}
            }
            steps {
                input('Do you want to proceed with deployment?')
                echo 'Deploying... this would deploy bundled plugin, updated or new api configs, and api docs'
            }
        }

        stage('Upload bundle to S3') {
            steps {
                script{
                    sh '''
                        cd GithubActionsTest/src/custom-go-plugin/go/src
                        go get -d github.com/TykTechnologies/mserv
                        
                        wget https://github.com/TykTechnologies/mserv/releases/download/v0.9.9-beta.1/mservctl.linux.amd64
                        ls
                        pwd
                        
                        chmod +x mservctl.linux.amd64
                    '''
                    def mservOutput = sh(
                            script: 'fleet.api-gateway/src/custom-go-plugin/go/src/mservctl.linux.amd64 --config fleet.api-gateway/src/custom-go-plugin/go/src/mserv.yaml push fleet.api-gateway/src/custom-go-plugin/tyk/bundle/bundle.zip >>result.txt 2>&1',
                            returnStdout: true
                        ).trim()

                    result = readFile('result.txt').trim()

                    // Extract the "ID" value using regular expressions
                    def idMatch = result =~ /ID: ([\w-]+)/

                    if (idMatch) {
                        BUNDLE_ID = idMatch[0][1].trim()
                        echo "ID: ${BUNDLE_ID}"
                    } else {
                        error "Failed to extract the ID from mserv output."
                    }  
                }
            }
        }
        
        stage('Deployment') {
            stages {
                stage('deploy') {
                    stages {
                        // how to deal with a deployment rollback scenario if something fails?
                        stage('deploy plugin') {
                            steps {
                                script{
                                    sh '''
                                        cd GithubActionsTest/src/custom-go-plugin/go/src
                                        go get -d github.com/TykTechnologies/mserv
                                        
                                        wget https://github.com/TykTechnologies/mserv/releases/download/v0.9.9-beta.1/mservctl.linux.amd64
                                        ls
                                        pwd
                                        
                                        chmod +x mservctl.linux.amd64
                                    '''
                                    def mservOutput = sh(
                                            script: 'fleet.api-gateway/src/custom-go-plugin/go/src/mservctl.linux.amd64 --config fleet.api-gateway/src/custom-go-plugin/go/src/mserv.yaml push fleet.api-gateway/src/custom-go-plugin/tyk/bundle/bundle.zip >>result.txt 2>&1',
                                            returnStdout: true
                                        ).trim()

                                    result = readFile('result.txt').trim()

                                    // Extract the "ID" value using regular expressions
                                    def idMatch = result =~ /ID: ([\w-]+)/

                                    if (idMatch) {
                                        env.BUNDLE_ID = idMatch[0][1].trim()
                                        echo "ID: ${env.BUNDLE_ID}"
                                    } else {
                                        error "Failed to extract the ID from mserv output."
                                    }

                                    //echo 'push bundled plugin artifact to AWS S3'
                                    //env.custom_middleware_bundle = "kunybg9283"
                                }
                            }
                        }

                        stage('deploy api configs') {
                            steps {
                                echo 'deploy merged api config to the correct gateway'

                                script{
                                    echo "hello script"
                                                                
                                    def jsonArray = new groovy.json.JsonSlurperClassic().parseText(env.jsonArrayPUTGlobal)
                                    def jsonArray2 = new groovy.json.JsonSlurperClassic().parseText(env.jsonArrayPOSTGlobal)

                                    if (jsonArray instanceof List && !jsonArray.isEmpty()) {
                                        
                                        def jsonPUT
                                        for (item in jsonArray) {
                                                                                        
                                            //Editing bundle ID in our json                                            
                                            item.api_definition.custom_middleware_bundle = env.BUNDLE_ID

                                            jsonPUT = new groovy.json.JsonBuilder(item).toPrettyString()

                                            def response2 = sh(script: """
                                                curl --location --request PUT "${env.ENDPOINT_URL}/${env.apiID}" --header 'Content-Type: application/json' --header "authorization: ${tykApiKeyEnv}" --data '${jsonPUT}'
                                            """, returnStatus: true)
                                                                                                                                                                               
                                            if (response2 == 0) {
                                                echo "Success."
                                            } else {
                                                error "Error. Response code: ${response2}"
                                            }
                                            
                                        }
                                    }/* else {
                                        error "This is not a Json array."
                                    }*/
                                    

                                    if (jsonArray2 instanceof List && !jsonArray2.isEmpty()) {
                                        
                                        for (item in jsonArray2) {
                                            //Using regular expressions because this is json string
                                            def regexPattern = "\"custom_middleware_bundle\": \"[^\"]*\""
                                            item = item.replaceAll(regexPattern, "\"custom_middleware_bundle\": \"$env.BUNDLE_ID\"")
                                            
                                            def response2 = sh(script: """
                                                curl --location "${env.ENDPOINT_URL}" --header 'Content-Type: application/json' --header "authorization: ${tykApiKeyEnv}" --data '${item}'
                                            """, returnStatus: true)                                           
                                            
                                            echo "hello"
                                            if (response2 == 0) {
                                                echo "Success."
                                            } else {
                                                error "Error. Response code: ${response2}"
                                            }
                                        }  
                                    }
                                }
                            }
                        }

                        stage('deploy api docs') {
                            steps {
                                echo 'deploy api doc to dev portal -- this needs to be thought through more'
                            }
                        }
                    }
                }
            }
        }
    }
}


def checkCoverageThreshold() {
    def coverageThreshold = 80.0  // Define your desired coverage threshold
    def coverageReport = readFile('fleet.api-gateway/src/custom-go-plugin/go/src/coverage_summary.txt')

    /// Extract the coverage percentage from the last line of the report
    def lastLine = coverageReport.readLines().last()
    def matcher = lastLine =~ /(\d+\.\d+)%/

    ///split it by tabs, and extract the coverage percentage from the last element after splitting. 
    if (matcher) {
        def coveragePercentage = lastLine[matcher.start(1)..matcher.end(1)-1].toDouble()

        if (coveragePercentage < coverageThreshold) {
            error("Coverage below threshold (${coveragePercentage}% < ${coverageThreshold}%), stopping the pipeline.")
        }
    } else {
        error("Failed to extract coverage percentage from the report.")
    }
}